      subroutine gcrpos (ixx,iyy,xpos,ypos,xmax,xmin,lbnd,diff,iopcon,ie&
     &r)
      implicit integer*4(i-n)
      !ccc  version date: 07/01/86
      !ccc  author(s): roger clark
      !ccc  language:  ratfor
      !ccc
      !ccc  short description:
      !ccc            this subroutine reads the graphics cursor position
      !ccc            and returns the x and y screen and scaled data values.
      !ccc		iix,iiy = screen space -- xpos, ypos = data space
      !ccc  algorithm description: none
      !ccc  system requirements:   none
      !ccc  subroutines called:
      !ccc  argument list description:
      !ccc     argumrnts: none
      !ccc  parameter description:
      !ccc  common description:
      !ccc  message files referenced:
      !ccc  internal variables:
      !ccc  file description:
      !ccc  user command lines:
      !ccc  update information:
      !ccc  notes:
      !ccc
      !##### Beginning   ../common/lbl3
      !     /lbl3/ common:
      !       ictrl  : control flag for indicating errors are involved or a flag
      !         indicating overlaping spectra in the display routine.
      !       idad   : flag indicating that erorrs are included in the data (needs
      !         to be phased out ).
      !       ixit   : flag to indicate that user aborted routine and returned to
      !         the main routines.
      !
      common /lbl3/ ictrl, idad, ibncon,ibncn2, ixit
      integer*4 ictrl, idad, ibncon,ibncn2, ixit
      !######  error  : errors to the data ( 1 standard deviation of the mean ).
      common /lblerr/ error(4864)
      real*4 error
      !##### End   ../common/lbl3
      !##### Beginning   ../common/hptrm
      common /hptrm/    igrmod,ihpout,imode,ixlast,iylast,ipen
      common /hptrm/    iot
      character*80      ihpout
      integer*4         igrmod,imode,ixlast,iylast,ipen,iot
      !##### End   ../common/hptrm
      !##### Beginning   ../common/lundefs
      integer*4 luntxt,ulun,ylun,ttyin,ttyout,dlun,vlun,wlun
      integer*4 addlun,wavlun,lstlun,pltlun,wvhlun
      integer*4 ttllun,cmdlun,slun,rlun,cpylun,wrtlun,redlun
      parameter (luntxt=1)
      parameter (ulun=3)
      parameter (ylun=4)
      parameter (ttyin=5)
      parameter (ttyout=6)
      parameter (dlun=7)
      parameter (vlun=8)
      parameter (wlun=9)
      parameter (addlun=10)
      parameter (redlun=10)
      parameter (wrtlun=11)
      parameter (wavlun=11)
      parameter (lstlun=12)
      parameter (pltlun=13)
      parameter (wvhlun=14)
      parameter (ttllun=15)
      parameter (cmdlun=16)
      parameter (slun=17)
      parameter (rlun=18)
      parameter (cpylun=19)
      !##### End   ../common/lundefs
      !##### Beginning   ../common/alphabet
      common	/alpha/	iha,ihb,ihc,ihd,ihe,ihf,ihg,ihh,ihi,ihj,ihk,ihl,ihm&
     &,ihn,iho,ihp,ihq,ihr,ihs,iht,ihu,ihv,ihw,ihx,ihy,ihz
      common	/alpha/	ihca,ihcb,ihcc,ihcd,ihce,ihcf,ihcg,ihch,ihci,ihcj,i&
     &hck,ihcl,ihcm,ihcn,ihco,ihcp,ihcq,ihcr,ihcs,ihct,ihcu,ihcv,ihcw,ih&
     &cx,ihcy,ihcz
      common	/digit/	ih0,ih1,ih2,ih3,ih4,ih5,ih6,ih7,ih8,ih9
      common  /asciic/ihprd,ihandp
      integer*4	iha,ihb,ihc,ihd,ihe,ihf,ihg,ihh,ihi,ihj,ihk,ihl,ihm,ihn,&
     &iho,ihp,ihq,ihr,ihs,iht,ihu,ihv,ihw,ihx,ihy,ihz
      integer*4	ihca,ihcb,ihcc,ihcd,ihce,ihcf,ihcg,ihch,ihci,ihcj,ihck,i&
     &hcl,ihcm,ihcn,ihco,ihcp,ihcq,ihcr,ihcs,ihct,ihcu,ihcv,ihcw,ihcx,ih&
     &cy,ihcz
      integer*4	ih0,ih1,ih2,ih3,ih4,ih5,ih6,ih7,ih8,ih9
      integer*4	ihprd,ihandp
!##### End   ../common/alphabet
      character*80 atemp, iopcon
      real*4 lbnd
!
! clear error variable.  its set for gcchan to use if necessary
!
      ier = 0
      axl = 56.
      axh = 500.
      ayl = 46.
      ayh = 276.
      atemp = iopcon
!
!     determine constants to scale data
!
      if (diff .eq. 0.) then
       diff = 0.1e-36
      end if
      dy = (ayh-ayl)/diff
      an = xmax - xmin
      if (an .le. 0) then
       an = 0.1e-36
      end if
      dx = (axh-axl)/an
!
! this read is to 1) check for e or x, and 2) allow the user to position
! the graphics cursor, and then hit return to enter the spot
!
!
! flush graphics
!
      call sb(0)
1          continue
      if (igrmod .ne. 50 .and. igrmod .ne. 51) then
       read (ttyin,2,end=2000,err=2000) iopcon
2		format      (a)
       i = 1
       call wjfren (i,x,il)
       if (il .eq. ihe .or. il .eq. ihx) then
        iopcon = atemp
        ier = il
        return
      end if
      end if
!
! get cursor position
!
      call cursrd(ixx,iyy)
      if (ixx .eq. -1 .and. iyy .eq. -1) then
       ier = ihe
       return
      end if
      x = float (ixx)
      y = float(iyy)
      if (y > ayh .or. y < ayl .or. x > axh .or. x < axl) then
       call serase(0,318,511,348)
       call movabs (0,338)
       call sb(0)
       write (ttyout, 30) ixx,iyy
       call movabs (ixx, iyy)
       go to 1
      end if
!
! calculate x and y postion in data space
!
      xpos = (x-axl)/dx + xmin
      ypos = (y-ayl)/dy + lbnd
20	format      (a,'*s3^',a,$)
! RED Added commas just before each i6 and after last i6 in 30 format statement
30	format      (20x,'OUT OF BOUNDS (',i6,',',i6,')')
2000          continue
      iopcon = atemp
      return
      end 
